<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class IssueActivity extends BaseIssueActivity
{
  public $blackList = array(
    'is_closed', 'opened_at', 'opened_by', 'resolved_at',
    'is_resolved', 'resolved_by', 'closed_at', 'closed_by',
    'assigned_to', 'status_id', 'orig_estimate'
  );

  protected $old_values;
  protected $modified;

  public function setIssueAndChanges(Issue $issue, array $old_values)
  {
    $this->Issue = $issue;
    $this->modified = $issue->getModified();
    $this->old_values = $old_values;
  }

  public function preSave($event)
  {
    if (!isset($this->changes)) $this->changes = $this->calculateChanges();
    if (!isset($this->verb)) $this->verb = $this->calculateVerb();
  }

  protected function calculateVerb()
  {
    if (array_key_exists('assigned_to', $this->modified)) {
      $this->Issue->refreshRelated('AssignedTo');
    }

    if (!$this->Issue->exists())
    {
      return 'Opened (assigned to ' . $this->Issue->AssignedTo . ')';
    }
    else if (array_key_exists('is_closed', $this->modified))
    {
      if ($this->Issue->isClosed())
      {
        return 'Closed';
      }
      else
      {
        return 'Reopened (assigned to ' . $this->Issue->AssignedTo . ')';
      }
    }
    else if (array_key_exists('status_id', $this->modified))
    {
      $this->Issue->refreshRelated('Status');
      if ($this->Issue->isResolved())
      {
        return (string) $this->Issue->Status;
      }
      else
      {
        return 'Activated (assigned to ' . $this->Issue->AssignedTo . ')';
      }
    }
    else if (array_key_exists('assigned_to', $this->modified))
    {
      return 'Assigned to ' . $this->Issue->AssignedTo;
    }
    else
    {
      return 'Edited';
    }
  }

  protected function calculateChanges()
  {
    if (!$this->Issue->exists()) return '';
    $changes = array();
    foreach ($this->modified as $field => $value)
    {
      if (!in_array($field, $this->blackList))
      {
        $field_name = $this->getIssueFieldName($field);
        $old_value = $this->getIssueFieldValue($field, false);
        $new_value = $this->getIssueFieldValue($field, true);
        $changes[] = "$field_name changed from '$old_value' to '$new_value'.";
      }
    }
    return implode("\n", $changes);
  }

  protected function getIssueFieldName($field)
  {
    return Doctrine_Inflector::classify(str_replace('_id', '', $field));
  }

  /**
   * @arg refresh - get old values or new values?
   */
  protected function getIssueFieldValue($field, $refresh = false)
  {
    if ($this->Issue[$field] && strpos($field, '_id') !== false)
    {
      if ($refresh)
      {
        $this->Issue->refreshRelated($this->getIssueFieldName($field));
      }
      return $this->Issue[$this->getIssueFieldName($field)];
    }
    else
    {
      if ($refresh)
      {
        return $this->Issue[$field];
      }
      else
      {
        return $this->old_values[$field];
      }
    }
  }

  public function preInsert($event)
  {
    if (!isset($this->created_at))
    {
      $this->created_at = date('Y-m-d H:i:s');
    }
    if (!isset($this->created_by))
    {
      $this->created_by = Listener_Userstampable::getCurrentUserId();
    }
  }
}

